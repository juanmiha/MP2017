package org.mp.sesion09;

import java.io.BufferedReader;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;

import java.io.IOException;

import java.text.DecimalFormat;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Scanner;


public class ConjuntoDatos {
	
	private File archivoTexto;
	private String separador;
	private Locale locale;
	
	private List cabecera;
	private int numeroLineas;
	private int numeroColumnas;

	private double[][] datos;
	
	
	public ConjuntoDatos(File archivoTexto, String separador,
			Locale locale) throws Exception {
		super();
		this.archivoTexto = archivoTexto;
		this.separador = separador;
		this.locale = locale;
		this.numeroLineas = numLineas(archivoTexto);
		this.numeroColumnas = numColumnas(archivoTexto);
		this.cabecera = cabecera(archivoTexto);
		this.datos = leerDatos(archivoTexto, numeroLineas, numeroColumnas);
	}
	

	private List cabecera(File archivoTexto) throws IOException {
		
		FileReader fr = new FileReader(archivoTexto);
		BufferedReader br = new BufferedReader(fr);

		String cadena;
		cadena = br.readLine();
		
		Scanner scanner = new Scanner(cadena);
		scanner.useDelimiter(this.separador);
		scanner.useLocale(this.locale);
		
		int contador = 0;
		while (scanner.hasNext()) {
			scanner.next();
			contador++;
		}
		
		//String[] cabecera = new String[contador];
		ArrayList cabecera = new ArrayList();
		
		Scanner scanner1 = new Scanner(cadena);
		scanner1.useDelimiter(this.separador);
		scanner1.useLocale(this.locale);
		int i = 0;

		while (scanner1.hasNext()) {
			cabecera.add( scanner1.next());
			i++;
		}
		
		return cabecera;
	}

	private int numLineas(File archivoTexto) throws IOException {

		FileReader fr = new FileReader(archivoTexto);
		BufferedReader br = new BufferedReader(fr);

		int numLineas = 0;
		while ((br.readLine()) != null) {
			// System.out.println(cadena);
			numLineas += 1;
		}
		
		br.close();
		return numLineas-1;
	}
	
	private int numColumnas(File archivoTexto) throws IOException {
	
		FileReader fr = new FileReader(archivoTexto);
		BufferedReader br = new BufferedReader(fr);

		String cadena;
		int numColumnas = 0;
		cadena = br.readLine();
		
		Scanner scanner = new Scanner(cadena);
		scanner.useDelimiter(";");
		System.out.println(scanner);
		while (scanner.hasNext()) {
			scanner.next();
			numColumnas +=1;
		}
		br.close();
		return numColumnas;
	}
	

	private double[][] leerDatos(File archivoTexto, int filas, int columnas) {

		double[][] datosA = new double[filas][columnas];
		
		try {
			FileReader fr = new FileReader(archivoTexto);
			
			BufferedReader br = new BufferedReader(fr);;
			br.readLine();
			
			/*for (int i = 0; i < datosA.length; i++) {
				String cadena = br.readLine();
				StringTokenizer st = new StringTokenizer(cadena,";");
				int j = 0;
				while (st.hasMoreElements()) {
					String s = (String) st.nextElement();
					datosA[i][j] = Double.parseDouble(s.trim());
					j++;
				}
			
			}*/
			
			for (int i = 0; i < datosA.length; i++) {
				String cadena = br.readLine();
				Scanner sc = new Scanner(cadena);
				sc.useDelimiter(";");
				sc.useLocale(Locale.US);
				int j = 0;
				while (sc.hasNext()) {
					datosA[i][j] = sc.nextDouble();
					j++;
				}
			}
			br.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return datosA;

	}
	
	public double[] getColumna(int columna) throws Exception {
		
		if (columna<0 && columna>numeroColumnas) {
			throw new Exception("Columna no valida");
		}
		
		double[] tempA = new double[numeroLineas];
		
		for (int i = 0; i < numeroLineas; i++) {
			tempA[i]=datos[i][columna];
		}
		
		return tempA;
	}
	
	public double[] getColumna(String columna) throws Exception {
		
		int indice = 0;
		boolean encontrado = false;
		
		int i = 0;
		for (Iterator iterator = cabecera.iterator(); iterator.hasNext();) {
			String cadena = (String) iterator.next();
			if (cadena.equals(columna)) {
				indice = i;
				
				encontrado = true;
				break;
			}
			i++;
			
		}
		
		if (!encontrado) {
			throw new Exception("Columna no valida");
		}
		
		return getColumna(indice);
	}
	
	public List getCabecera() {
		return cabecera;
	}

	
	public String getSeparador() {
		return separador;
	}

	public Locale getLocale() {
		return locale;
	}


	public int getNumeroLineas() {
		return numeroLineas;
	}


	public int getNumeroColumnas() {
		return numeroColumnas;
	}


	public double[][] getDatos() {
		return datos;
	}

	public File getArchivoTexto() {
		return archivoTexto;
	}


	public void exportar(String[] cabecera, String archivoTexto, String separador) throws Exception {
		
		double[][] tempDatos = new double[numeroLineas][cabecera.length];
		
		for (int i = 0; i < cabecera.length; i++) {
			double[] tempCol = getColumna(cabecera[i]);
			for (int j = 0; j < tempCol.length; j++) {
				tempDatos[j][i] = tempCol[j];
			}
		}
		FileWriter fw = new FileWriter(archivoTexto);
		BufferedWriter bw = new BufferedWriter(fw);
		PrintWriter pw = new PrintWriter(bw);
		
		for (int i = 0; i < cabecera.length; i++) {
			pw.print(cabecera[i]);
			if ((i < cabecera.length-1)) {
				pw.print(separador);
			}
		}
		pw.println();
		
		for (int i = 0; i < tempDatos.length; i++) {
			for (int j = 0; j < tempDatos[0].length; j++) {
				pw.print(tempDatos[i][j]);
				if ((j < tempDatos[0].length-1)) {
					pw.print(separador);
				}
			}
			pw.println();
		}
		pw.close();
		
		
	}


	public ConjuntoDatos conjuntoDatos(String[] cabecera, String archivoTexto,
			String separador, Locale locale) throws Exception {
		
		exportar(cabecera,archivoTexto,separador);
		return new ConjuntoDatos(new File(archivoTexto),separador,locale); 
	}

}
